/*
 * pacwrap
 *
 * Copyright (C) 2023-2024 Xavier Moffett <sapphirus@azorium.net>
 * SPDX-License-Identifier: GPL-3.0-only
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

use std::fmt::{Result, Write};

use crate::help::{version_string, HelpLayout};

fn header(buf: &mut String, layout: &HelpLayout) -> Result {
    let name = env!("CARGO_PKG_NAME");
    let date = env!("PACWRAP_BUILDSTAMP");

    match layout {
        HelpLayout::Man => writeln!(buf, ".nh\n.TH {name} 1 \"{date}\" \"{name} version_string_placeholder\" \"User Manual\"\n"),
        HelpLayout::Markdown => writeln!(
            buf,
            "# Pacwrap User Manual

This document was generated by the {name} binary with version {} of the program.\n",
            version_string()
        ),
        _ => Ok(()),
    }
}

pub fn default(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let sub_para = layout.sub_paragraph();
    let sub_bold = layout.sub_bold();
    let bold = layout.bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();

    header(buf, layout)?;
    writeln!(
        buf,
        "{head}NAME{reset}
{tab}pacwrap

{head}SYNOPSIS{reset}
{tab}pacwrap [{bold}OPERATION{reset_bold} | {bold}VERB{reset_bold}] [{bold}ARGUMENTS{reset_bold}] [{bold}TARGETS{reset_bold}]	

{head}DESCRIPTION{reset}
{sub_para}A package management front-end which utilises libalpm to facilitate the creation of unprivileged, 
{tab}namespace containers with parallelised, filesystem-agnostic deduplication. These containers
{tab}are constructed with bubblewrap to execute package transactions and launch applications.

{sub_para}This application is designed to allow for the creation and execution of secure, replicable 
{tab}containerised environments for general-purpose use. CLI and GUI applications are all supported. 
{tab}Once a container environment is configured, it can be re-established or replicated on any system. 

{sub_para}Each long-option parameter can also be specified herein as a command verb for a matter of convenience.
{tab}Additional command verb shortcuts are available and are documented alongside their relevancy.

{head}OPERATIONS{reset}
{sub_bold}-E, --exec, run{reset_bold}
{tab}{tab}Invoke a container to execute the provided command sequence.

{sub_bold}-S, --sync{reset_bold}
{tab}{tab}Synchronize package databases and containers in aggregate. 

{sub_bold}-R, --remove{reset_bold}
{tab}{tab}Remove packages from target containers in aggregate.

{sub_bold}-C, --compose{reset_bold}
{tab}{tab}Compose a container from configuration.

{sub_bold}-Q, --query{reset_bold}
{tab}{tab}Query package information from target container.

{sub_bold}-P, --process{reset_bold}
{tab}{tab}Manage and show status of running container processes.

{sub_bold}-L, --list{reset_bold}
{tab}{tab}List available containers managed by pacwrap.

{sub_bold}-U, --utils{reset_bold}
{tab}{tab}Engage miscellaneous utilities to manage containers.

{sub_bold}-V, --version{reset_bold}
{tab}{tab}Display version banner or information.

{sub_bold}-h, --help{reset_bold} <{bold}OPERATION{reset_bold} | {bold}VERB{reset_bold} | {bold}TOPIC{reset_bold}>
{tab}{tab}Print the help manual to {bold}STDOUT{reset_bold}.\n"
    )
}

pub fn execute(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let reset = layout.reset();
    let bold = layout.bold();
    let sub = layout.sub();
    let sub_sect = layout.sub_section();
    let sub_bold = layout.sub_bold();
    let sub_para = layout.sub_paragraph();
    let reset_bold = layout.reset_bold();

    writeln!(
        buf,
        "{head}EXECUTE{reset}
{sub_para}Invoke a container to execute the provided command sequence. Command verb {bold}`run`{reset_bold} provides a 
{tab}shortcut to this module.

{sub_bold}<CONTAINER> <CMD>{reset_bold}
{tab}{tab}Container name to spawn an instance of, along with the proceeding command-line sequence to execute.
{tab}{tab}execute. All command-line parameters after the container name are passed through to execute inside
{tab}{tab}of the container environment.

{sub_bold}-s, --shell{reset_bold}
{tab}{tab}Invoke a bash shell in the target container. Command verb {bold}`shell`{reset_bold} provides a shortcut
{tab}{tab}to this module with this option.

{sub_bold}-r, --root{reset_bold}
{tab}{tab}Execute the provided command sequence with fakeroot and fakechroot.
	
{sub_sect}EXAMPLES{reset_bold}
{sub}`$ pacwrap run firefox firefox`
{tab}{tab}Launch firefox inside an instance of the firefox container.

{sub}`$ pacwrap shell -r base`
{tab}{tab}Open a fakeroot bash shell inside an instance of the base container.\n"
    )
}

pub fn sync(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let bold = layout.bold();
    let tab = layout.tab();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();
    let sub = layout.sub();
    let sub_bold = layout.sub_bold();
    let sub_sect = layout.sub_section();
    let sub_para = layout.sub_paragraph();

    writeln!(
             buf,
             "{head}SYNCHRONIZATION{reset}
{sub_para}Provides the facilities required to be able to synchronize and create containers in aggregate. 

{sub_bold}-y, --refresh{reset_bold}
{tab}{tab}Synchronize remote package databases. Specify up to 2 times to force a refresh.

{sub_bold}-u, --upgrade{reset_bold}
{tab}{tab}Execute aggregate upgrade routine on all or specified containers. Use {bold}`-t, --target[=CONTAINER]`{reset_bold} followed
{tab}{tab}by a list of packages to specify package targets. Packages applicable to a target {bold}must{reset_bold} only be specified 
{tab}{tab}after the target operand.

{sub_bold}-c, --create{reset_bold}
{tab}{tab}Create a container with the first specified target. A container type argument is also required. Command verb 
{tab}{tab}{bold}`init`{reset_bold} provides a shortcut to the synchronization module, equivalent to specifying the options {bold}`-Syuc`{reset_bold}.

{sub_bold}-b, --base{reset_bold}
{tab}{tab}Base container type. Specify alongside {bold}`-c, --create`{reset_bold} to assign this container type during creation.

{tab}{tab}This container type is used as the base layer for all downstream containers. Only one base container 
{tab}{tab}dependency per slice or aggregate is supported. Filesystem and package deduplication via slices and 
{tab}{tab}aggregate containers are recommended, but optional. This container type is not dependant.

{sub_bold}-s, --slice{reset_bold}
{tab}{tab}Slice container type. Specify alongside {bold}`-c, --create`{reset_bold} to assign this container type during creation.

{tab}{tab}Requires a base dependency, and optionally one or more sliced dependencies, to ascertain foreign
{tab}{tab}packages and influence ordering of downstream synchronization target(s). Container slicing provides
{tab}{tab}the ability to install packages in a lightweight, sliced filesytem, which aid in the deduplication 
{tab}{tab}of common downstream package and filesystem dependencies.

{tab}{tab}Useful for graphics drivers, graphical toolkits, fonts, etc.; these are not meant for applications.

{sub_bold}-a, --aggegrate{reset_bold}
{tab}{tab}Aggregate container type. Specify alongside {bold}`-c, --create`{reset_bold} to this assign container type during creation.

{tab}{tab}Requires a base dependency, and optionally one or more sliced dependencies, in order to acertain foreign
{tab}{tab}packages and amalgamate the target. These containers are ideal for installing software with the aid of
{tab}{tab}filesystem and package deduplication. 

{tab}{tab}Useful for all general purpose applications, browsers, e-mail clients, or even terminal user interface 
{tab}{tab}applications such as IRC clients. It is recommended to base your containers on aggregate type containers.

{sub_bold}-t, --target{reset_bold} <{bold}CONTAINER{reset_bold}> <..{bold}PACKAGE{reset_bold}>
{tab}{tab}Declare a target container for the specified operation, followed by a list of package target(s).

{sub_bold}-f, --filesystem{reset_bold}
{tab}{tab}Force execution of filesystem synchronization target on all or specified containers. In combination 
{tab}{tab}with {bold}-o/--target-only{reset_bold}, in addition to no other specified targets, filesystems will be synchronized 
{tab}{tab}without package synhcronization on on all applicable containers. This operation is useful for propagation 
{tab}{tab}of manual filesystem changes to all aggregate containers.

{sub_bold}-o, --target-only{reset_bold}
{tab}{tab}Apply specified operation on the specified target(s) only.

{sub_bold}-d, --dep{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Specify dependencies for a container create operation.

{sub_bold}-p, --preview{reset_bold}
{tab}{tab}Perform a dryrun operation on existing containers to preview changes applicable or otherwise specified.
{tab}{tab}Only applicable to pre-existing targets and not create operations.

{sub_bold}--force-foreign{reset_bold}
{tab}{tab}Force synchronization of foreign packages on resident container. Useful for when installing 
{tab}{tab}a new package in an aggregate container without all the prerequisite foreign dependencies
{tab}{tab}synchronized to the resident container's package database.

{sub_bold}--dbonly{reset_bold}
{tab}{tab}Transact on resident containers with a database-only transaction.

{sub_bold}--noconfirm{reset_bold}
{tab}{tab}Override confirmation prompts and confirm all operations.

{sub_sect}EXAMPLES{reset_bold}
{sub}`$ pacwrap init --base --target base`
{tab}{tab}Synchronize remotes and create a base-type container named `base` with no additional packages.

{sub}`$ pacwrap -Syucst common gtk3 qt6-base --dep=base -st nvidia nvidia-utils --dep=base,common`
{tab}{tab}Synchronize remote databases, create two sliced containers, one named `common` with the packages 
{tab}{tab}`gtk3`, `qt6-base`, and another named `nvidia` with the package `nvidia-utils`.

{sub}`$ pacwrap -Syucat mozilla firefox --dep=base,common,nvidia`
{tab}{tab}Synchronize remote databases and upgrade container dependencies, then create aggregate container 
{tab}{tab}named `mozilla` with the package `firefox`.

{sub}`$ pacwrap -Sot mozilla thunderbird`
{tab}{tab}Install `thunderbird` in the target container `mozilla`.

{sub}`$ pacwrap -Sof`
{tab}{tab}Synchronize filesystem state of all associated containers present in the data directory.\n"
    )
}

pub fn remove(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let sub = layout.sub();
    let bold = layout.bold();
    let sub_sect = layout.sub_section();
    let sub_bold = layout.sub_bold();
    let sub_para = layout.sub_paragraph();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();

    writeln!(
        buf,
        "{head}REMOVE{reset}
{sub_para}Remove packages from specified containers.

{sub_bold}-s, --recursive{reset_bold}
{tab}{tab}Recursively remove all target packages with the associated target container. This does
{tab}{tab}not apply to packages upstream of a downstream container.

{sub_bold}-c, --cascade{reset_bold}
{tab}{tab}Remove all target packages with the associated target container, including all their 
{tab}{tab}associated dependencies, provided they are not required by other packages, and are not
{tab}{tab}marked as being upstream of the target container.

{sub_bold}-t, --target{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Specify a target container for the specified operation. At least one container target is 
{tab}{tab}is required for package removal operations.

{sub_bold}--force-foreign{reset_bold}
{tab}{tab}Force the removal of foreign packages on target container. Useful for cleaning up
{tab}{tab}the package database of foreign, upstream dependencies synchronized to the target
{tab}{tab}container's package database.

{sub_bold}-m, --delete{reset_bold}
{tab}{tab}Delete root filesystem(s) of specified targets. Shortcout to {bold}-Ur{reset_bold}.

{sub_bold}-p, --preview{reset_bold}
{tab}{tab}Preview operation and perform no transaction.

{sub_bold}--dbonly{reset_bold}
{tab}{tab}Transact on resident containers with a database-only transaction.

{sub_bold}--noconfirm{reset_bold}
{tab}{tab}Override confirmation prompts and confirm all operations.

{sub_sect}EXAMPLES{reset_bold}
{sub}`$ pacwrap -Rt firefox firefox`
{tab}{tab}Remove the target package firefox from target container firefox.

{sub}`$ pacwrap rm firefox`
{tab}{tab}Delete the root filesystem for the firefox container.\n"
    )
}

pub fn compose(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let bold = layout.bold();
    let sub_bold = layout.sub_bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();
    let sub = layout.sub();
    let sub_sect = layout.sub_section();

    writeln!(
        buf,
        "{head}COMPOSE{reset}
{tab}Compose containers from container configuration files. This functionality provides a way
{tab}to deterministically compose containers from an established configuration.

{sub_bold}<FILE_PATH>{reset_bold}
{tab}{tab}Compose a container from the specified configuration file on disk. Unless a target is
{tab}{tab}otherwise specified, the container will be initialized with a name derived from the
{tab}{tab}filename provided.

{sub_bold}-r, --reinitialize{reset_bold}
{tab}{tab}Compose an available, existing container for composition. The pre-existing container root
{tab}{tab}will be deleted and the container will be composited from the configuration data enumerated.

{sub_bold}-t, --target={reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Specify a target container for the specified operation.

{sub_bold}-f, --force{reset_bold}
{tab}{tab}Disable sanity checks and force removal of container filesystem(s).

{sub_bold}--reinitialize-all{reset_bold}
{tab}{tab}Queues all available, existing containers for composition. All pre-existing container roots
{tab}{tab}will be deleted and composited from the available configuration data enumerated.

{sub_bold}--from-config{reset_bold}
{tab}{tab}Instruct pacwrap to populate configuration data from uninitialized containers. Under normal
{tab}{tab}circumstances, configuration data will only be populated from containers with configuration
{tab}{tab}data and an associative container root present. This option engages an alternate enuermation 
{tab}{tab}pathway to allow composition of dormant, uninitialized container configurations.

{sub_bold}--noconfirm{reset_bold}
{tab}{tab}Override confirmation prompts and confirm all operations.

{sub_sect}EXAMPLES{reset_bold}
{sub}`$ pacwrap compose -rt element element.yml`
{tab}{tab}Reinitialize an existing container named element with its configuration derived 
{tab}{tab}from the file 'element.yml'.

{sub}`$ pacwrap compose --reinitialize-all --from-config`
{tab}{tab}Reinitialize all container configurations available in '{bold}$PACWRAP_CONFIG_DIR{reset_bold}/container/'.\n"
    )
}

pub fn query(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let sub_bold = layout.sub_bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();
    let sub = layout.sub();
    let bold = layout.bold();
    let sub_sect = layout.sub_section();
    let sub_para = layout.sub_paragraph();

    writeln!(
        buf,
        "{head}QUERY{reset}
{sub_para}Query package list on target container.

{sub_bold}-q, --quiet{reset_bold}
{tab}{tab}Quiet the output by truncating the package string.

{sub_bold}-t, --target{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Specify a target container for the specified operation.

{sub_bold}-e, --explicit{reset_bold}
{tab}{tab}Filter output to explicitly-marked packages.

{sub_sect}EXAMPLE{reset_bold}
{sub}`$ pacwrap -Qqe base`
{tab}{tab}Print a list of explicit packages from the {bold}base{reset_bold} container to {bold}STDOUT{reset_bold}.\n"
    )
}

pub fn process(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let sub_bold = layout.sub_bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();
    let sub = layout.sub();
    let bold = layout.bold();
    let sub_sect = layout.sub_section();
    let sub_para = layout.sub_paragraph();

    writeln!(
        buf,
        "{head}PROCESS{reset}
{sub_para}Table a process list of running containers. Containers may be filtered on target and process depth.

{sub_bold}-s, --summary{reset_bold}
{tab}{tab}Enumerate a process summary of containers instantiated by pacwrap.

{sub_bold}-i, --id-list{reset_bold}
{tab}{tab}Enumerate a process id list of containers instantiated by pacwrap. 

{sub_bold}-k, --kill{reset_bold}
{tab}{tab}Kill target containers and their associated processes.

{sub_bold}-a, --all{reset_bold}
{tab}{tab}Target all containers and enumerate their associated processes.

{sub_bold}-d, --depth{reset_bold}
{tab}{tab}Enumerate all processes at the specified depth associated with running containers.

{sub_bold}-t, --target{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Specify a target container for the specified operation.

{sub_bold}--noconfirm{reset_bold}
{tab}{tab}Override confirmation prompts and confirm all operations.

{sub_sect}EXAMPLES{reset_bold}
{sub}`$ pacwrap -Psaxc`
{tab}{tab}Print table enumerating all container processes to {bold}STDOUT{reset_bold} with process arguments
{tab}{tab}and execution path split into separate columns.

{sub}`$ ps up \"$(pacwrap -Pia)\"`
{tab}{tab}Enumerate container processes with `ps` via encapsulating an enumeration of pids from all instances
{tab}{tab}into a space-delimited bash string.\n"
    )
}

pub fn list(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let sub = layout.sub();
    let sub_sect = layout.sub_section();
    let sub_bold = layout.sub_bold();
    let sub_para = layout.sub_paragraph();
    let bold = layout.bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();

    writeln!(
        buf,
        "{head}LIST{reset}
{sub_para}List all initialized containers presently managed by pacwrap. 

{sub_para}This command module is a shortcut to {bold}-Ul{reset_bold}. Command verb {bold}`ls`{reset_bold} also is a
{tab}{tab}shortcut to this command module.

{sub_bold}-t, --total{reset_bold}
{tab}{tab}Display a total column.

{sub_bold}-o, --on-disk{reset_bold}
{tab}{tab}Display a size on disk column.

{sub_bold}-b, --bytes{reset_bold}
{tab}{tab}Toggle byte unit display.

{sub_sect}EXAMPLES{reset_bold}
{sub}`$ pacwrap -Ld`
{tab}{tab}Print container tabulation out to {bold}STDOUT{reset_bold} with two total columns, one listing the
{tab}{tab}container name, and the other detailing the total size-on-disk consumption displayed with byteunits.

{sub}`$ pacwrap ls -btbts`
{tab}{tab}Print container tabulation to {bold}STDOUT{reset_bold} with three total columns, first listing the
{tab}{tab}container name, second the total amount of bytes, and the last showing the total with byteunits. 
{tab}{tab}Then print a summation of total, actual consumption below.\n"
    )
}

pub fn utils(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let sub = layout.sub();
    let sub_para = layout.sub_paragraph();
    let sub_sect = layout.sub_section();
    let sub_bold = layout.sub_bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();
    let bold = layout.bold();

    writeln!(
        buf,
        "{head}UTILITIES{reset}
{sub_para}Miscellaneous utilities which provide helpful auxiliary functionality to aid in configuration and
{tab}maintenance of containers. Each utility is considered a command module and therefore can be shortcuted
{tab}with a command verb.

{sub_bold}-d, --desktop{reset_bold}
{tab}{tab}Create desktop file to launch application inside of a pacwrap container.

{sub_bold}-v, --view{reset_bold}
{tab}{tab}Invoke {bold}$EDITOR{reset_bold} to view file associated with pacwrap.

{sub_bold}-e, --edit{reset_bold}
{tab}{tab}Invoke {bold}$EDITOR{reset_bold} to edit file associated with pacwrap.

{sub_bold}-o, --open{reset_bold}
{tab}{tab}Invoke default file viewer on specified target's home or root directory.

{sub_bold}-l, --list{reset_bold}
{tab}{tab}Print a list of containers and basic metrics.

{sub_bold}-s, --symlink{reset_bold}
{tab}{tab}Create a symbolic container.

{sub_bold}-r, --remove{reset_bold}
{tab}{tab}Delete a container(s) root filesystem.

{sub_sect}DESKTOP OPTIONS{reset_bold}
{sub_para}Create and manage desktop files to launch applications in pacwrap from your favourite applications menu.

{sub_bold}-c, --create{reset_bold} <{bold}CONTAINER{reset_bold}> <{bold}APPLICATION{reset_bold}>
{tab}{tab}Create desktop file associated with application at `$HOME/.local/share/applications/` launching an 
{tab}{tab}application in pacwrap.

{sub_bold}-l, --list{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}List available desktop files in the container root located at `/usr/share/applications/`.

{sub_bold}-r, --remove{reset_bold} <{bold}APPLICATION{reset_bold}>
{tab}{tab}Remove desktop file associated with application from `$HOME/.local/share/applications/`. 

{sub_sect}EDITOR OPTIONS{reset_bold}
{sub_para}These options are associated with the {bold}--edit{reset_bold} and {bold}--view{reset_bold} utility command modules.

{sub_bold}-c, --config{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Edit specified container configuration located in the pacwrap data directory. Defaults to
{tab}{tab}the primary configuration file: '{bold}$PACWRAP_CONFIG_DIR{reset_bold}/pacwrap.yml' if no option is otherwise
{tab}{tab}specified.

{sub_bold}-d, --desktop{reset_bold} <{bold}APPLICATION{reset_bold}>
{tab}{tab}Edit specified desktop file associated with a pacwrap container.

{sub_bold}-r, --repo{reset_bold}
{tab}{tab}Edit repositories configuration file: `$PACWRAP_CONFIG_DIR/repositories.conf`.

{sub_bold}-l, --log{reset_bold}
{tab}{tab}View 'pacwrap.log'. This file contains transaction log iformation.

{sub_sect}OPEN OPTIONS{reset_bold}
{sub_para}These options are associated with the {bold}--open{reset_bold} utility command module.

{sub_bold}-h, --home{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Specified container's home filesystem.

{sub_bold}-r, --root{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Specified container's root filesystem.

{sub_bold}-t, --target{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Target container to perform the operation.

{sub_sect}LIST{reset_bold}
{sub_para}These options are associated with the {bold}--list{reset_bold} utility command module.

{sub_bold}-t, --total{reset_bold}
{tab}{tab}Display a total column.

{sub_bold}-d, --on-disk{reset_bold}
{tab}{tab}Display a size on disk column.

{sub_bold}-s, --summary{reset_bold}
{tab}{tab}Print out a summary table to {bold}STDOUT{reset_bold}.

{sub_bold}-b, --bytes{reset_bold}
{tab}{tab}Toggle byte unit display for the proceeding item.

{sub_sect}REMOVE OPTIONS{reset_bold}
{sub_para}These options are associated with the {bold}--remove{reset_bold} utility command module.

{sub_bold}-t, --target{reset_bold} <{bold}CONTAINER{reset_bold}>
{tab}{tab}Target container to perform the operation.

{sub_bold}--noconfirm{reset_bold}
{tab}{tab}Peform the operation without confirmation.

{sub_bold}--force{reset_bold}
{tab}{tab}Disable sanity checks and force removal of conatiner filesystem.

{sub_sect}SYMBOLIC{reset_bold}
{sub_para}These options are associated with the {bold}--symlink{reset_bold} utility command module.

{sub_bold}<TARGET> <DEST>{reset_bold}
{tab}{tab}Create a symbolic container of target at destination.

{sub_bold}-n, --new{reset_bold}
{tab}{tab}Create a fresh configuration rather than derive it from the target.

{sub_sect}EXAMPLES{reset_bold}
{sub}`$ pacwrap -Uoh firefox`
{tab}{tab}Open firefox's home directory in the default file manager.

{sub}`$ pacwrap -Uvl`
{tab}{tab}View `{bold}$PACWRAP_DATA_DIR{reset_bold}/pacwrap.log` with {bold}$EDITOR{reset_bold}.

{sub}`$ pacwrap -Uec firefox`
{tab}{tab}Edit `$PACWRAP_CONFIG_DIR{reset_bold}/container/firefox.yml` with {bold}$EDITOR{reset_bold}.

{sub}`$ pacwrap utils -dc firefox firefox`
{tab}{tab}Create desktop file `$HOME/.local/share/applications/pacwrap.firefox.desktop` derived from
{tab}{tab}`/usr/share/applications/firefox.desktop` in the root of the firefox container.

{sub}`$ pacwrap utils symlink java runelite`
{tab}{tab}Create a symbolic container called `runelite` of `java`.

{sub}`$ pacwrap -Uld`
{tab}{tab}Print container tabulation out to {bold}STDOUT{reset_bold} with two total columns, one listing the
{tab}{tab}container name, and the other detailing the total size-on-disk consumption displayed with byteunits.

{sub}`$ pacwrap utils -lbtbts`
{tab}{tab}Print container tabulation to {bold}STDOUT{reset_bold} with three total columns, first listing the
{tab}{tab}container name, second the total amount of bytes, and the last showing the total with byteunits. 
{tab}{tab}Then print a summation of total, actual consumption below.\n"
    )
}

pub fn meta(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let bold = layout.bold();
    let sub_bold = layout.sub_bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();
    let tab = layout.tab();

    writeln!(
             buf,
             "{head}HELP{reset}
{sub_bold}-h, --help{reset_bold} <{bold}TOPIC{reset_bold}>
{tab}{tab}Print the specified topic to {bold}STDOUT{reset_bold}.

{sub_bold}-m, --more{reset_bold}
{tab}{tab}When specifying a topic to display, show the default topic in addition to specified options.

{sub_bold}-f, --format{reset_bold} <{bold}FORMAT{reset_bold}>
{tab}{tab}Change output format of help in {bold}STDOUT{reset_bold}. Format options include: 'ansi', 'dumb', 'markdown', and 'man'. 
{tab}{tab}This option is for the express purposes of generating documentation at build time, and has little utility
{tab}{tab}outside the context of package maintenance. 'man' option produces troff-formatted documents for man pages.

{sub_bold}-a, --all, --help=all{reset_bold}
{tab}{tab}Display all help topics.\n"
    )
}

pub fn environment(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let bold = layout.bold();
    let tab = layout.tab();
    let sub_sect = layout.sub_section();
    let sub_bold = layout.sub_bold();
    let sub_para = layout.sub_paragraph();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();

    writeln!(
        buf,
        "{head}ENVIRONMENT{reset}
{sub_para}Provided herein are environment variables of which can be used to configure pacwrap's runtime parameters.
{tab}All environment variables listed are case sensitive.

{sub_para}Use with care: These variables if used improperly could result in undesired behaviour.

{sub_bold}PACWRAP_CONFIG_DIR{reset_bold} <{bold}DIR{reset_bold}>
{tab}{tab}Set path of the configuration directory, overriding the default location.

{sub_bold}PACWRAP_DATA_DIR{reset_bold} <{bold}DIR{reset_bold}>
{tab}{tab}Set path of the data directory, overriding the default location.

{sub_bold}PACWRAP_CACHE_DIR{reset_bold} <{bold}DIR{reset_bold}> 
{tab}{tab}Set path of the cache directory, overriding the default location.

{sub_bold}PACWRAP_HOME{reset_bold} <{bold}DIR{reset_bold}>
{tab}{tab}Upon container invocation, mount the set path provided when engaging the {bold}`home`{reset_bold} filesystem module.

{sub_bold}PACWRAP_ROOT{reset_bold} <{bold}DIR{reset_bold}>
{tab}{tab}Upon container invocation, mount the set path provided when engaging the {bold}`root`{reset_bold} filesystem module.

{sub_bold}PACWRAP_VERBOSE{reset_bold} <{bold}0{reset_bold} | {bold}1{reset_bold}>
{tab}{tab}Toggle verbose output during a transaction. Valid options are `1` for enablement and `0` for 
{tab}{tab}disablement of verbosity.

{sub_sect}DEFAULT{reset_bold}
{sub_para}For the following environment variables, contained herein are default runtime values. Any variables not
{tab}included here in this subsection are to be assumed to have inert values by default.

{sub_bold}PACWRAP_CACHE_DIR{reset_bold}
{tab}{tab}`$HOME/.cache/pacwrap`: Default cache directory.

{sub_bold}PACWRAP_CONFIG_DIR{reset_bold}
{tab}{tab}`$HOME/.config/pacwrap`: Default configuration directory.

{sub_bold}PACWRAP_DATA_DIR{reset_bold}
{tab}{tab}`$HOME/.local/share/pacwrap`: Default data directory.\n"
    )
}

pub fn version(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let sub_bold = layout.sub_bold();
    let tab = layout.tab();
    let bold = layout.bold();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();

    writeln!(
        buf,
        "{head}VERSION{reset}
{sub_bold}-V, --version, --version=min{reset_bold}
{tab}{tab}Sends version information to {bold}STDOUT{reset_bold} with colourful ASCII art. 
{tab}{tab}The 'min' option provides a minimalistic output as is provided to non-colour terms.\n"
    )
}

pub fn authors(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let reset = layout.reset();

    writeln!(
        buf,
        "{head}AUTHOR{reset}
{tab}Copyright (C) 2023-2024 Xavier Moffett <sapphirus@azorium.net>\n"
    )
}

pub fn license(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let reset = layout.reset();

    writeln!(
        buf,
        "{head}LICENSE{reset}
{tab}This program may be freely redistributed under the terms of the GNU General Public License v3 only.\n"
    )
}
