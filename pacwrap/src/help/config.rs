/*
 * pacwrap
 *
 * Copyright (C) 2023-2024 Xavier R.M. <sapphirus@azorium.net>
 * SPDX-License-Identifier: GPL-3.0-only
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

use std::fmt::{Result, Write};

use crate::help::{version_string, HelpLayout};

pub fn default(buf: &mut String, layout: &HelpLayout) -> Result {
    let head = layout.head();
    let tab = layout.tab();
    let bold = layout.bold();
    let sub_bold = layout.sub_bold();
    let sub_para = layout.sub_paragraph();
    let reset = layout.reset();
    let reset_bold = layout.reset_bold();
    let code = layout.code();
    let name = env!("CARGO_PKG_NAME");
    let date = env!("PACWRAP_BUILDSTAMP");

    match layout {
        HelpLayout::Man => writeln!(
            buf,
            ".nh\n.TH {name}.yml 2 \"{date}\" \"{name} version_string_placeholder\" \"Pacwrap Configuration Directives\"\n"
        )?,
        HelpLayout::Markdown => writeln!(
            buf,
            "# Pacwrap Configuration Directives

This document was generated by the {name} binary with version {} of the program.\n",
            version_string(),
        )?,
        _ => (),
    }

    writeln!(
        buf,
        "{head}NAME{reset}
{sub_bold}pacwrap.yml{reset_bold} - pacwrap configuration file.
{sub_bold}repositories.conf{reset_bold} - pacman repository file.

{head}SYNOPSIS{reset}
{sub_bold}~/.config/pacwrap/pacwrap.yml{reset_bold}
{sub_bold}~/.config/pacwrap/repositories.conf{reset_bold}

{head}DESCRIPTION{reset}
{tab}Pacwrap upon invocation will attempt to deserialise {bold}pacwrap.yml{reset_bold}(2) at the location specified herein
{tab}compliant with the XDG Directory Specification. Upon activation of {bold}libalpm{reset_bold}(3), the repositories.conf
{tab}file will be deserialised by the pacman_conf crate in order to faciliate the population of package
{tab}repositories and mirrors.

{sub_para}Repository configuration is parsed using {bold}pacman.conf{reset_bold}(5)'s ini format. All other options related the
{tab}{bold}libalpm{reset_bold}(3) as defined by {bold}pacman.conf{reset_bold}(5) therein are otherwise ignored. At present by default, 
{tab}the repository configuration, as defined, references the mirrorlist defined by your system. 
{tab}This ensures as smooth of an out-of-box experience as humanly possible.

{tab}Optionally you may specify environment variables, as specified in {bold}pacwrap{reset_bold}(1), to override
{tab}these locations. These options are designated for experienced users only.

{head}EXAMPLE{reset}
{code}
{tab}config:
{tab}  logging: Basic
{tab}  summary: Table
{tab}  progress:
{tab}    transact: CondensedForeign
{tab}    download: CondensedForeign
{tab}alpm:
{tab}  ignore_pkg:
{tab}  - nvidia-utils
{tab}  - lib32-nvidia-utils
{code}

{head}SECTIONS{reset}
{sub_bold}config:{reset_bold}
{sub_para}{tab}Configuration pertaining to {bold}pacwrap{reset_bold}(1) are to be declared within this section.

{sub_bold}alpm:{reset_bold}
{sub_para}{tab}Configuration pertaining to {bold}libalpm{reset_bold}(3) are to be declared within this section.

{head}CONFIG{reset}
{sub_bold}logging{reset_bold}: Basic
{tab}{tab}Logging verbosity specified here. Available options are {bold}Basic{reset_bold}, {bold}Verbose{bold}, and {bold}None{reset_bold}.

{sub_bold}summary{reset_bold}: Basic
{tab}{tab}Transaction summary type. Available options are {bold}Basic{reset_bold}, {bold}BasicForeign{reset_bold}, {bold}Table{reset_bold}, and {bold}TableForeign{reset_bold}. 

{tab}{tab}Each option suffixed with the {bold}Foreign{reset_bold} juxtaposition, will take effect only during the
{tab}{tab}juxtaposed transaction type with otherwise the opposite effect.

{sub_bold}progress:{reset_bold}
{tab}{tab}Progress types are declared within this subsection.

{head}PROGRESS{reset}
{sub_bold}transact{reset_bold}: CondensedForeign
{tab}{tab}Progress type for transaction progress is specified with this option. Available values are 
{tab}{tab}{bold}Basic{reset_bold}, {bold}Condensed{bold}, {bold}CondensedForeign{reset_bold}, {bold}CondensedLocal{reset_bold}, and {bold}Verbose{reset_bold}.

{tab}{tab}Each option suffixed with the {bold}Foreign{reset_bold} or {bold}Local{reset_bold} juxtaposition, will take effect only during 
{tab}{tab}the juxtaposed transaction type with otherwise the opposite effect.

{sub_bold}download{reset_bold}: Verbose
{tab}{tab}Download type for download progress is specified with this option. Available values are 
{tab}{tab}{bold}Basic{reset_bold}, {bold}Condensed{bold}, {bold}CondensedForeign{reset_bold}, {bold}CondensedLocal{reset_bold}, and {bold}Verbose{reset_bold}.

{tab}{tab}Each option suffixed with the {bold}Foreign{reset_bold} or {bold}Local{reset_bold} juxtaposition, will take effect only during 
{tab}{tab}the juxtaposed transaction type with otherwise the opposite effect.

{head}ALPM{reset}
{sub_bold}ignore_pkg:{reset_bold}
{tab}{tab}Ignored package(s) are declared herein with a string array.

{sub_bold}hold_pkg:{reset_bold}
{tab}{tab}Held package(s) are declared herein with a string array.

{sub_bold}sig_level{reset_bold}: Required DatabaseOptional
{tab}{tab}Default global signature level - see {bold}pacman.conf{reset_bold}(5) for valid options. Options are declared
{tab}{tab}as a singular string value.

{sub_bold}sig_level_local{reset_bold}: Optional
{tab}{tab}Default local signature level - see {bold}pacman.conf{reset_bold}(5) for valid options. Options are declared
{tab}{tab}as a single string value.

{sub_bold}check_space{reset_bold}: true
{tab}{tab}Instructs {bold}libalpm{reset_bold}(3), where applicable, to check if there's available space on disk in order 
{tab}{tab}to facilitate a transaction. Value is declared with a {bold}bool{reset_bold}.

{sub_bold}download_timeout{reset_bold}: true
{tab}{tab}Instructs {bold}libalpm{reset_bold}(3) to timeout downloads from unsatisfactory mirrors. Value is declared with 
{tab}{tab}a {bold}bool{reset_bold}.

{sub_bold}parallel_downloads{reset_bold}: 1
{tab}{tab}Instructs {bold}libalpm{reset_bold}(3) to parallelise the download queue with a maximum queue amount. Specify an 
{tab}{tab}{bold}integer{reset_bold} to declare a maximum value.

{head}SEE ALSO{reset}
{tab}{tab}{bold}pacman.conf{reset_bold}(5), {bold}libalpm{reset_bold}(3)

{head}COPYRIGHT{reset}
{tab}Copyright (C) 2023-2024 Xavier R.M.

{sub_para}This program may be freely redistributed under the
{tab}terms of the GNU General Public License v3 only.\n"
    )
}
