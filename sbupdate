#!/bin/bash
#
# BSD-3-Clause
#
# Sandbox Update - Copyright 2023 Xavier (sapphirus@azorium.net)
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#  this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice, 
#  this list of conditions and the following disclaimer in the documentation 
#  and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its contributors 
#  may be used to endorse or promote products derived from this software without 
#  specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (
# INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

INSTANCE_ROOT=$SANDBOX_BASE/fs/root
INSTANCE_DB_ROOT=$SANDBOX_BASE/etc/db
INSTANCE_DEPS_ROOT=$SANDBOX_BASE/etc/deps
INSTANCE_PACMAND=$SANDBOX_BASE/etc/pacman.d

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)
YELLOW=$(tput setaf 11)
RESET=$(tput sgr0)
BAR="$RED$BOLD::$RESET$BOLD"
BAR_GREEN="$GREEN$BOLD::$RESET$BOLD"
ARROW="$CYAN$BOLD->$RESET"
ARROW_GREEN="$GREEN$BOLD->$RESET"
ARROW_RED="$RED$BOLD->$RESET"

PARAMS="--root --exec --sandbox="
DEP_PARAMS="--dep --root --exec --sandbox="
LINKFILES=("bin" "lib" "lib32" "share")

main () {
	parse_args $@

	if [[ ! -d $INSTANCE_ROOT ]]; then
		echo $BOLD$RED"Sandbox root is either missing or an environmental variable is misconfigured.$RESET" 
		exit
	fi	

	local roots=
	local rootdeps=
	local baserootdeps=

	init_vars

	if [[ $SWITCH == *v* ]]; then
		log "$BOLD$(basename $BASH_SOURCE)$RESET version 0.8 beta. Copyright 2023 Xavier M."
		log "Licensed under (to be specified) license, see LICENSE file for details."
		exit	
	fi

	if [[ $SWITCH == *g* ]] && [[ $SWITCH == *b* ]]; then
		generate_pacman_conf ${ARGS[@]}
		return
	fi

	if [[ $SWITCH != *b* ]]; then
		log $BAR "Update dependencies \n\n$baserootdeps$rootdeps\n"
		
		if [[ "$(query_confirm "Proceed with update?")" ]]; then	
			generate_pacman_conf $baserootdeps$rootdeps
			update $baserootdeps$rootdeps
		fi
	fi

	if [[ $SWITCH == *s* ]] || [[ $SYNCREQ == 1 ]]; then
		log $BAR "Synchronization event triggered..."	
		generate_cache $baserootdeps
		update_links $rootdeps$roots
		cleanup_cache $rootdeps$baserootdeps
		log $BAR_GREEN "Synchronization complete!"
	fi

	if [[ $SWITCH != *b* ]]; then
		log $BAR "Update sandbox \n\n$roots\n"	
		if [[ "$(query_confirm "Proceed with update?")" ]]; then
			generate_pacman_conf $roots
			update $roots
		fi
	fi
}

parse_args () {
	for var in "$@"; do
		case $var in 
			--generate-config|-g)
				SWITCH=g$SWITCH
				;;
			--bypass-update|-b)
				SWITCH=b$SWITCH
				;;
			--no-confirm|-n)
				SWITCH=n$SWITCH
				;;
			--sync|-s)
				SWITCH=s$SWITCH
				;;		
			-*)
				SWITCH=$(echo $var | cut -c 2-)
				;;
			*)
				ARGS+=("$var")
				;;
			esac
	done
}

init_vars() {
	local rootlist=$(ls -U -1F $INSTANCE_ROOT | grep -i "/" | tr -d "/")
	for f in $rootlist; do
		if [[ -f $INSTANCE_ROOT/$f/.root ]]; then
			baserootdeps+="$f "
		elif [[ -f $INSTANCE_ROOT/$f/.dep ]]; then
			rootdeps+="$f "
		else	
			roots+="$f "
		fi
	done
}

invoke_link_deletion() {
	local pwd=$PWD
	local file_old=$link/$item.old.zst
	local file_new=$link/$item.zst

	([[ ! -f $file_new ]] || [[ ! -f $file_old ]]) && return

	cd $root/usr
	diff --unchanged-group-format= --new-line-format='%L' \
		-biw <(echo "$(zstd -fd < $file_new)") <(echo "$(zstd -fd < $file_old)") | xargs rm -f
	cd $pwd
}

invoke_update_link() {
	local sandbox=$1

	if [[ ${synced[$sandbox]} ]]; then
		return
	fi
	if [[ -f $INSTANCE_ROOT/$sandbox/.root ]]; then
		return
	fi

	local linkfiles=${LINKFILES[@]}
	
	log $ARROW "Synchronizing links for dependency $BOLD$dep$RESET in $BOLD$sandbox$RESET...$RESET"

	local dep=$(return_dependency)

	if [[ $SWITCH != *f* ]]; then
		for item in ${linkfiles[@]}; do
			local root=$INSTANCE_ROOT/$sandbox
			local link=$INSTANCE_DB_ROOT/$dep
			invoke_link_deletion	
		done
	fi

	for item in ${linkfiles[@]}; do
		local root=$INSTANCE_ROOT/$sandbox
		local source=$INSTANCE_ROOT/$dep		
		local src=$source/usr/$item 
		local dest=$root/usr/	

		cp -flR $src $dest 2>/dev/null
		log " Synchronization complete for $BOLD$item$RESET in $BOLD$sandbox$RESET!"
	done

	if [[ -f $INSTANCE_ROOT/$sandbox/.dep ]]; then
		invoke_generate_cache
	fi
	synced[$sandbox]=1
}

update_links() {
	declare -A synced
	for sandbox in "$@"; do				
		check_root "link synchronization"
		[[ $? == 1 ]] && continue		
		for dep in $(return_dependencies); do
			check_root "link synchronization"
			[[ $? == 1 ]] && continue	
			invoke_update_link $dep
		done
		invoke_update_link $sandbox
	done
}

cleanup_cache() {
	for sandbox in "$@"; do				
		check_root "cache file operation"
		[[ $? == 1 ]] && continue
	
		local linkfiles=${LINKFILES[@]}
	
		for item in ${linkfiles[@]}; do
			rm $INSTANCE_DB_ROOT/$sandbox/$item.old.zst
		done
	done
}

invoke_generate_cache() {
	local dep=$sandbox
	local linkfiles=${LINKFILES[@]}
	
	for item in ${linkfiles[@]}; do
		local root=$INSTANCE_ROOT/$sandbox
		local link=$INSTANCE_DB_ROOT/$sandbox
		local rdir=$root/usr/
		local tdir=$root/usr/$item
	
		mv $link/$item.zst $link/$item.old.zst
		find $tdir -type f,l | sed -z "s,$rdir,,g" | zstd -fq -o $link/$item.zst
	done
	log $ARROW_GREEN "Generated link cache for $BOLD$sandbox$RESET!"	
}

generate_cache() {
	for sandbox in "$@"; do				
		check_root "cache"
		[[ $? == 1 ]] && continue

		invoke_generate_cache
	done
}

check_root() {
	if [[ ! -d $INSTANCE_ROOT/$sandbox ]]; then
		log $BAR$RESET "Root for $BOLD$sandbox$RESET not found.$RESET\n Skipping $@..."
		return 1
	fi
}

invoke_vdb () {	
	local root=$INSTANCE_ROOT/$sandbox
	local dep=$(return_dependency)

	if [[ -f $root/.dep ]]; then
		dep=$sandbox
	fi

	local template=$INSTANCE_PACMAND/tpl/pacman.$dep.conf 
	local pacmanconf=$INSTANCE_PACMAND/pacman.$sandbox.conf
	local header="##\n## THIS pacman.conf WAS AUTOMATICALLY GENERATED on $(date "+%F %T"). \n## DO NOT EDIT\n##\n" 
	local ignorepkg=

	if [[ ! -f $root/.root ]]; then	
		declare -A skip
		local skiplist=
		ignorepkg="## Start of automated configuration ##\n"

		for depc in $(return_dependencies); do
			local pkgs=$(sbexecute $PARAMS$depc pacman -Qq)
			for pkg in $pkgs; do
			 	[[ ${skip[$pkg]} ]] && continue
				ignorepkg+="IgnorePkg  = $pkg\n"
			done			
			skiplist=$pkgs$skiplist

			for pkg in $skiplist; do
				skip[$pkg]=1
			done
		done
		ignorepkg=$ignorepkg"## End of automated configuration ##"
	fi

	echo -e $header > $pacmanconf
	cat $template | sed -z "s/###IGNOREPKG###/$ignorepkg/g" >> $pacmanconf
	log "$BAR_GREEN Generated pacman.conf for $sandbox."
}

invoke_update() {
	local params=$PARAMS	

	log $BAR "Checking $sandbox instance for updates..."

	sbexecute $params$sandbox pacman -Sy
	local result=$(sbexecute pacman --color always $params$sandbox -Qu | grep -v "ignored")
	
	if [[ ! $result ]]; then
		log $BAR_GREEN "Packages are up-to-date for $sandbox!"
	 	return
	fi

	echo -e "$BAR Packages to be installed or upgraded: $RESET \n\n$result\n"
	[[ ! $(query_confirm "Confirm update and database synchronization on $sandbox") ]] && return
	SYNCREQ=1
	sbexecute pacman $params$sandbox -Su --noconfirm 2>/dev/null
	log $BAR "Synchronizing pacman database for foreign packages..."
	sbexecute pacman $params$sandbox -Su --dbonly --noconfirm --config=/tmp/pacman.conf 2>/dev/null
	log $BAR_GREEN "Synchronization and upgrades are complete!"
}

update () {		
	for sandbox in "$@"; do	
		check_root "update"
		[[ $? == 1 ]] && continue	
		invoke_update
	done
}

generate_pacman_conf () {		
	for sandbox in "$@"; do	
		check_root "pacman.conf generation"
		[[ $? == 1 ]] && continue	
		invoke_vdb
	done
}

return_dependencies() {
	echo $(cat $INSTANCE_DEPS_ROOT/$sandbox 2>/dev/null)
}

return_base() {
	echo $(cat $INSTANCE_DEPS_ROOT/$sandbox 2>/dev/null | head -n 1)
}

return_dependency() {
	echo $(cat $INSTANCE_DEPS_ROOT/$sandbox 2>/dev/null | tail -n 1)
}

log () {
	echo -e "$@ $RESET"	
}

query_confirm () {
	if [[ $SWITCH == *n* ]]; then		
		echo 1	
		return
	fi
	read -rp "$BAR $@ [Y/n]$RESET " input
	if [[ "$input" != "Y" ]] && 
	   [[ "$input" != "y" ]] &&
           [[ "$input" != "" ]]; then
		return	
	fi
	echo 1
}

main $@
