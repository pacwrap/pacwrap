#!/bin/bash
#
# BSD-3-Clause
#
# Sandbox Update - Copyright 2022-2023 Xavier (sapphirus@azorium.net)
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#  this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice, 
#  this list of conditions and the following disclaimer in the documentation 
#  and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its contributors 
#  may be used to endorse or promote products derived from this software without 
#  specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (
# INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SANDBOX_ROOT=$SANDBOX_BASE/base/root
SANDBOX_DEP_ROOT=$SANDBOX_BASE/dep/root
SANDBOX_DB_ROOT=$SANDBOX_BASE/etc/db

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)
BAR="$RED$BOLD::$RESET$BOLD"
BAR_GREEN="$GREEN$BOLD::$RESET$BOLD"
ARROW="$CYAN$BOLD->$RESET"
ARROW_GREEN="$GREEN$BOLD->$RESET"

PARAMS="--root --exec --sandbox="
LINKFILES=("_bin" "_lib" "_lib32" "_share")

main () {
	parse_args $@

	if [[ ! -d $SANDBOX_ROOT ]]; then
		echo $BOLD$RED"Sandbox root is either missing or an environmental variable is misconfigured.$RESET" 
		exit
	fi	
	
	local list=${ARGS[@]}
	if [[ ! $list ]]; then
		list=`ls -1F $SANDBOX_ROOT | grep -i "/" | tr -d "/"` 
	fi

	local deps=`ls -1F $SANDBOX_DEP_ROOT | grep -i "/" | tr -d "/"` 	
	if [[ ! $deps ]]; then
		echo $BOLD$RED"Something has gone extremely WRONG here."
		exit 1
	fi

	log $BAR "Update on sandbox dependencies \n\n$deps\n"
	if [ ! "$(query_confirm "Proceed with update?")" ]; then
		update_deps $deps
		if [[ $SYNCREQ ]]; then
			log $BAR "Synchronization required for sandboxes..."
			update_links $deps
			update_links $list		
			update_link_lists $deps
			log $BAR_GREEN "Synchronization complete!"
		fi
	fi

	log $BAR "Update sandbox \n\n$list\n"	
	if [ ! "$(query_confirm "Proceed with update?")" ]; then
		update $list
	fi	
}

parse_args () {
	ARGS=()
	for var in "$@"; do
		case $var in 
			--sync|-s)
				SYNCREQ=1
				;;
			*)
				ARGS+=("$var")
				;;
			esac
	done
}

log () {
	echo -e "$@ $RESET"	
}
 
invoke_link_creation() {
	local target=${item##*_}
	local source=$SANDBOX_DEP_ROOT/$dep
	local src=$source/usr/$target 
	local dest=$root/usr/

	if [[ ! $1 ]]; then
		rsync -a --link-dest="$src" "$src" "$dest"
	else
		parse_file_list $(rsync -avn --link-dest="$src" "$src" "/tmp/usr/" | head -n -3 | tail -n +3 | tr -d ' ') > $link/$dep"_"$target		
	fi
}

parse_file_list() {
	local files=$@

	for f in ${files[@]}; do
		local file=${f%->*} 
		local filepath=$source/usr/$file
		if [[ -f $filepath ]] || [[ -L $filepath ]]; then
			echo $file
		fi
	done
}

invoke_link_deletion() {
	local not_found=
	local pwd=$PWD
	cd $root/usr
	if [[ ! -f $link/$item ]]; then
		not_found=1		
		echo $item
		return
	fi
	$(xargs rm -f < $link/$item) > /dev/null
	cd $pwd
}

function invoke_link_update() {
	local linkfiles=("$dep${LINKFILES[0]}" 
			 "$dep${LINKFILES[1]}" 
			 "$dep${LINKFILES[2]}" 
			 "$dep${LINKFILES[3]}")

	if [[ ! $1 ]]; then
		for item in ${linkfiles[@]}; do
			invoke_link_deletion
		done
	fi
	for item in ${linkfiles[@]}; do
		invoke_link_creation $1
		log " Synchronization complete for $BOLD${item##*_}$RESET in $BOLD$sandbox$RESET!"
	done
}
	
update_links() {	
	for sandbox in "$@"; do				
		local root=$SANDBOX_ROOT/$sandbox
		
		if [[ ! -d $root ]]; then
			root=$SANDBOX_DEP_ROOT/$sandbox
		fi
		if [[ ! -d $root ]]; then
			log "$sandbox not found."
			continue
		fi
		if [[ $sandbox == "base" ]]; then
			continue
		fi

		local dep=$(cat $SANDBOX_BASE/etc/deps/$sandbox | tail -n 1)
		local link=$SANDBOX_DB_ROOT/$dep
		log $ARROW "Synchronizing links for dependency $BOLD$dep$RESET in $BOLD$sandbox$RESET sandbox...$RESET"
		invoke_link_update
	done	
}

update_link_lists() {	
	for sandbox in "$@"; do				
		local root=$SANDBOX_DEP_ROOT/$sandbox
		local link=$SANDBOX_DB_ROOT/$sandbox
		local dep=$sandbox

		if [[ ! -d $root ]]; then
			log "$sandbox not found."
			continue
		fi
		log $ARROW "Synchronizing link list for dependency $BOLD$dep$RESET...$RESET"
		invoke_link_update 1
	done	
}

invoke_vdb () {	
	if [[ $var == "base" ]]; then
		return
	fi

	local sbroot=$SANDBOX_ROOT
	local dep=$(cat $SANDBOX_BASE/etc/deps/$1 | tail -n 1)

	if [[ $2 ]]; then
		sbroot=$SANDBOX_DEP_ROOT
		dep=$1
	fi

	echo -e "IgnorePkg =" > /tmp/vpkgs
	sbexecute $PARAMS$dep --dep pacman -Qq >> /tmp/vpkgs

	rm $sbroot/$1/etc/pacman.conf
	echo -e "## THIS /etc/pacman.conf WAS AUTOMATICALLY GENERATED on $(date "+%F %T"). \n## DO NOT EDIT  \n[options] " >> $sbroot/$1/etc/pacman.conf	

	local ignore=$(cat /tmp/vpkgs)
	sed -z "s/\n/ /g" /tmp/vpkgs >> $sbroot/$1/etc/pacman.conf
	echo -e "\n## END OF AUTOMATED CONFIGURATION." >> $sbroot/$1/etc/pacman.conf
	cat $SANDBOX_BASE/etc/pacman.d/pacman.$dep.conf >> $sbroot/$1/etc/pacman.conf
	rm /tmp/vpkgs 2>/dev/null

	log "$BAR_GREEN Generated pacman.conf for $1."
}


update_deps () {
	local dep=1;
	for var in "$@"; do				
		([[ $var == *.* ]]) && continue 
		invoke_vdb $var 1
		invoke_update $var "--dep"
	done
}

update () {		
	for var in "$@"; do				
		([[ $var == *.* ]] || [[ $var == "base" ]]) && continue 	
		invoke_vdb $var
		invoke_update $var
	done
}

invoke_update() {
	sbexecute $PARAMS$@ pacman -Sy
	local result=$(sbexecute pacman --color always $PARAMS$@ -Qu | grep -v "ignored")
	if [[ ! $result ]]; then
		log $BAR_GREEN "Packages are up-to-date for $1 sandbox!"
	 	return
	fi	
	echo -e "$BAR Packages to be installed or upgraded: $RESET \n\n$result\n"
	[ "$(query_confirm "Confirm update and database synchronization on sandbox $var")" != "" ] && return
	SYNCREQ=1
	sbexecute pacman $PARAMS$@ -Su --noconfirm --noprogressbar 2>/dev/null | grep -v "not permitted" 
	log $BAR "Synchronizing pacman database for foreign packages..."
	sbexecute pacman $PARAMS$@ -Su --dbonly --noconfirm --noprogressbar --quiet --config=/etc/pacman.base.conf 2>/dev/null | grep -v "not permitted"
	log $BAR_GREEN "Synchronisation and upgrades are complete!"
}

query_confirm () {
	read -rp "$BAR $@ [Y/n]$RESET " input
	if [[ "$input" != "Y" ]] && 
	   [[ "$input" != "y" ]] &&
           [[ "$input" != "" ]]; then
		echo 0
	fi
}

main $@
