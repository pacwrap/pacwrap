#!/bin/bash
#
# BSD-3-Clause
#
# Sandbox Update - Copyright 2022-2023 Xavier (sapphirus@azorium.net)
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#  this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice, 
#  this list of conditions and the following disclaimer in the documentation 
#  and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its contributors 
#  may be used to endorse or promote products derived from this software without 
#  specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (
# INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SANDBOX_ROOT=$SANDBOX_BASE/root
SANDBOX_DEP_ROOT=$SANDBOX_BASE/deps/root
SANDBOX_DB_ROOT=$SANDBOX_BASE/etc/db

BOLD=$(tput bold)
RED=$(tput setaf 1)
RESET=$(tput sgr0)
BAR="$BOLD$RED::$RESET$BOLD"
PARAMS="--root --exec --sandbox="



main () {
	if [[ ! -d $SANDBOX_ROOT ]]; then
		echo "$BOLD$RED Sandbox root is either missing or an environmental variable is misconfigured." 
		exit
	fi	


	local list=$@
	if [[ ! $list ]]; then
		list=`ls -1F $SANDBOX_ROOT | grep -i "/" | tr -d "/"` 
	fi
	local deps=`ls -1F $SANDBOX_DEP_ROOT | grep -i "/" | tr -d "/"` 	
	if [[ ! $deps ]]; then
		log "Something has gone extremely WRONG here."
	fi
	#update $list

	if [ ! "$(query_confirm "Invoke update on dependencies")" ]; then
		update_deps $deps
		update_link_db $deps
		update_link $deps
		update_link $list
	
	fi

	update $list
}

log () {
	echo -e "$BAR $@ $RESET"
	
}

update_link_db() {
	local dir=$PWD
	local output="/tmp/usr/"
	local deps=$@	

	for dep in ${deps[@]}; do
		local source=$SANDBOX_DEP_ROOT/$dep
		local target=$SANDBOX_DB_ROOT/$dep

		log "Synchronizing $dep file database..."

		if [[ ! -d $source ]] || [[ ! -d $target ]]; then
			log "Missing dependency directory structures. Aborting."
			exit
		fi
		
		if [[ $dep != "base" ]]; then
			link_update $source/usr/share $output --exclude-from=$target/base_share > "$target/"$dep"_share"
			link_update $source/usr/bin  $output --exclude-from=$target/base_bin > "$target/"$dep"_bin"
			link_update $source/usr/lib  $output --exclude-from=$target/base_lib > "$target/"$dep"_lib"		
		else		
			link_update $source/usr/share $output > "$target/"$dep"_share"
			link_update $source/usr/bin  $output > "$target/"$dep"_bin"
			link_update $source/usr/lib  $output > "$target/"$dep"_lib"		
		fi


		cd $target
		
		sha256sum $dep"_lib" > "$target/"$dep"_lib.sha256"
		sha256sum $dep"_bin" > "$target/"$dep"_bin.sha256"
		sha256sum $dep"_share" > "$target/"$dep"_share.sha256"
	
	done
	cd $dir	
}

invoke_link() {
	local dir=$PWD
	local dep=$1
	local source=$SANDBOX_DEP_ROOT/$dep
	local target=$2
	local exclude_params=

	log "Synchronizing links for $2 in $3 sandbox..."

	if [[ $dep != "base" ]]; then
		exclude_params="--exclude-from=$SANDBOX_DB_ROOT/base/base_$target"
	fi
	
	link_create $source/usr/$target $root/usr/ $exclude_params > $link/$dep"_"$target
	cd $link
	sha256sum $dep"_"$target > $link/$dep"_"$target.sha256
	cd $dir
}

link_update() {
	local source=$source
	parse_file_list $(rsync -av --dry-run $3 --link-dest="$1" "$1" "$2" | head -n -3 | tail -n +3 | tr -d ' ')
}


link_create() {
	local source=$source
	parse_file_list $(rsync -av $3 --link-dest="$1" "$1" "$2" | head -n -3 | tail -n +3 | tr -d ' ')
}

parse_file_list() {
	local files=$@

	for f in ${files[@]}; do
		local file=${f%->*} 
		local filepath=$source/usr/$file
		if [[ -f $filepath ]] || [[ -L $filepath ]]; then
			if [[ $file == "bin/[" ]]; then
				continue
			fi
			echo $file
		fi
	done
}

parse_delete_list() {
	local fail=$1
	local files=$(cat $link/$fail)
	

	for f in ${files[@]}; do
		local file=${f%->*} 
		local filepath=$root/usr/$file
		if [[ -f $filepath ]] || [[ -L $filepath ]]; then
			echo $filepath
		fi
	done	
}

checksum_link_files() {
	local dir=$PWD
	cd $link

	local linkfiles=$1"_bin.sha256 "$1"_lib.sha256 "$1"_share.sha256"
	for file in $linkfiles; do
		if [[ ! -f $link/$file ]]; then
			echo -e "${file%.*} "
			continue
		fi
		$(cat $SANDBOX_DB_ROOT/$1/$file | sha256sum --check --status);
		local return=$?
		if [[ $return == 1 ]]; then
			echo -e "${file%.*} "
		fi
	done
	cd $dir
}


invoke_link_update() {

	local not_found=

	checksum_fail_list=$(checksum_link_files $dep);

	if [[ $checksum_fail_list == "" ]]; then
		log "Link database $dep is up-to-date for $sandbox sandbox!"
		return
	fi

	log "Preparing to resynchronize $dep in $sandbox's filesystem..."

			
	for item in ${checksum_fail_list[@]}; do	
		if [[ ! -f $link/$item ]]; then
			not_found=1		
			continue
		fi
		local files=`parse_delete_list $item`
		for file in $files; do
			rm -f $files
			done
		done

	if [[ $not_found ]]; then
		log "Syncing $dep in $sandbox's filesystem for the first time!"
	fi

	for item in ${checksum_fail_list[@]}; do
		invoke_link $dep ${item##*_} $sandbox
	done
}

update_link() {	
	for sandbox in "$@"; do				
		root=$SANDBOX_ROOT/$sandbox
		if [[ ! -d $root ]]; then
			root=$SANDBOX_DEP_ROOT/$sandbox
		fi

		if [[ ! -d $root ]]; then
			log "Weird..  $sandbox not found."
		fi

		link=$SANDBOX_DB_ROOT/$sandbox
		local deps=$(cat $SANDBOX_BASE/etc/deps/$sandbox)

		for dep in ${deps[@]}; do
			invoke_link_update
		done
	done
}


update_deps () {		
	for var in "$@"; do				
		([[ $var == *.* ]]) && continue 		 
		invoke_update $var "--dep"
	done
}


update () {		
	for var in "$@"; do				
		([[ $var == *.* ]] || [[ $var == "base" ]]) && continue 		 
		invoke_update $var
	done
}

invoke_update() {
	sbexecute $PARAMS$@ pacman -Sy
	local result=$(sbexecute pacman -Qu $PARAMS$@)
	if [[ ! $result ]]; then
		log "Packages are up-to-date for $1 sandbox!"
	 	return
	fi	
	echo -e "$BAR Packages to be installed or upgraded: $RESET \n\n$result\n"
	[ "$(query_confirm "Confirm update on sandbox $var")" != "" ] && return
	sbexecute pacman -Su $PARAMS$@ --noconfirm 2>/dev/null	 
}

query_confirm () {
	read -rp "$BAR $@ [Y/n]$RESET " input
	if [[ "$input" != "Y" ]] && 
	   [[ "$input" != "y" ]] &&
           [[ "$input" != "" ]]; then
		echo 0
	fi
}

main $@
