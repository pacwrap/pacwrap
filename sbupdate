#!/bin/bash
#
# BSD-3-Clause
#
# Sandbox Update - Copyright 2022-2023 Xavier (sapphirus@azorium.net)
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#  this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice, 
#  this list of conditions and the following disclaimer in the documentation 
#  and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its contributors 
#  may be used to endorse or promote products derived from this software without 
#  specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (
# INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SANDBOX_ROOT=$SANDBOX_BASE/fs/root
SANDBOX_DB_ROOT=$SANDBOX_BASE/etc/db

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)
YELLOW=$(tput setaf 11)
RESET=$(tput sgr0)
BAR="$RED$BOLD::$RESET$BOLD"
BAR_GREEN="$GREEN$BOLD::$RESET$BOLD"
ARROW="$CYAN$BOLD->$RESET"
ARROW_GREEN="$GREEN$BOLD->$RESET"
ARROW_RED="$RED$BOLD->$RESET"
SYNCED=()

PARAMS="--root --exec --sandbox="
DEP_PARAMS="--dep --root --exec --sandbox="
LINKFILES=("_bin" "_lib" "_lib32" "_share")

main () {
	parse_args $@

	if [[ ! -d $SANDBOX_ROOT ]]; then
		echo $BOLD$RED"Sandbox root is either missing or an environmental variable is misconfigured.$RESET" 
		exit
	fi	
	
	local roots=
	local list=${ARGS[@]}
	if [[ ! $list ]]; then
		list=`ls -1F $SANDBOX_ROOT | grep -i "/" | tr -d "/"` 
	fi

	local deplist=`ls -1F $SANDBOX_ROOT | grep -i "/" | tr -d "/"` 	
	local deps=

	for f in $deplist; do
		if [[ -f $SANDBOX_ROOT/$f/.dep ]] || [[ -f $SANDBOX_ROOT/$f/.root ]]; then
			deps="$deps $f"
		fi
	done
	for f in $list; do
		if [[ ! -f $SANDBOX_ROOT/$f/.dep ]] && [[ ! -f $SANDBOX_ROOT/$f/.root ]]; then
			roots="$roots $f"
		fi
	done
	
	if [[ $SWITCH != *b* ]]; then
		log $BAR "Update on sandbox dependencies \n\n$deps\n"
		if [[ "$(query_confirm "Proceed with update?")" ]]; then	
			update $deps
		fi
	fi

	if [[ $SWITCH == *s* ]] || [[ $SYNCREQ == 1 ]]; then
		log $BAR "Synchronization required for sandboxes..."
		update_links $list
		update_link_lists $deps
		log $BAR_GREEN "Synchronization complete!"
	fi

	if [[ $SWITCH != *b* ]]; then
		log $BAR "Update sandbox \n\n$roots\n"	
		if [[ "$(query_confirm "Proceed with update?")" ]]; then
			update $roots
		fi
	fi
}



parse_args () {
	ARGS=()
	for var in "$@"; do
		case $var in 
			--bypass-update|-b)
				SWITCH=b$SWITCH
				;;
			--no-confirm|-n)
				SWITCH=n$SWITCH
				;;
			--sync|-s)
				SWITCH=s$SWITCH
				;;
			-*)
				SWITCH=$(echo $var | cut -c 2-)
				;;
			*)
				ARGS+=("$var")
				;;
			esac
	done
}
 
invoke_link_creation() {
	local target=${item##*_}
	local source=$SANDBOX_ROOT/$dep
	local src=$source/usr/$target 
	local dest=$root/usr/

	if [[ ! $1 ]]; then
		cp -flR $src $dest 2>/dev/null	
	else
		find $src -type f,l -links +1 | sed -z "s,$source/usr/,,g" | zstd -fq -o $link/$dep"_"$target.zst
	fi
}

invoke_link_deletion() {
	local pwd=$PWD
	cd $root/usr
	if [[ ! -f $link/$item.zst ]]; then
		return 1
	fi
	zstd -fd < $link/$item.zst | xargs rm -f
	cd $pwd
}

invoke_link_sync() {
	local linkfiles=("$dep${LINKFILES[0]}" 
			 "$dep${LINKFILES[1]}" 
			 "$dep${LINKFILES[2]}" 
			 "$dep${LINKFILES[3]}")

	if [[ ! $1 ]]; then
		for item in ${linkfiles[@]}; do
			invoke_link_deletion
		done
	fi

	for item in ${linkfiles[@]}; do
		invoke_link_creation $1
		log " Synchronization complete for $BOLD${item##*_}$RESET in $BOLD$sandbox$RESET!"
	done
}



invoke_update_link() {
	local sandbox=$1
	local root=$SANDBOX_ROOT/$sandbox
	local synced=
	for syncdep in ${SYNCED[@]}; do
		if [[ $syncdep == $sandbox ]]; then
			synced=1
			break
		fi
	done
	if [[ $synced ]]; then
		return
	fi
	if [[ ! -d $root ]]; then
		log $ARROW_RED "Root for $BOLD$sandbox$RESET not found.\n Skipping link synchronization..."
		return
	fi
	if [[ -f $root/.root ]]; then
		return
	fi

	local dep=$(return_dependency)
	local link=$SANDBOX_DB_ROOT/$dep
	log $ARROW "Synchronizing links for dependency $BOLD$dep$RESET in $BOLD$sandbox$RESET sandbox...$RESET"
	invoke_link_sync
	SYNCED+=($sandbox)
}

update_links() {	
	for sandbox in "$@"; do				
		local dependency_chain=$(cat $SANDBOX_BASE/etc/deps/$sandbox 2>/dev/null)
		for dep in $dependency_chain; do
			invoke_update_link $dep
		done
		invoke_update_link $sandbox
	done	
}

update_link_lists() {	
	for sandbox in "$@"; do				
		local root=$SANDBOX_ROOT/$sandbox
		local link=$SANDBOX_DB_ROOT/$sandbox
		local dep=$sandbox

		if [[ ! -d $root ]]; then
			log $BAR "Root for dependency $sandbox not found.\n Skipping link list synchronization..."
			continue
		fi

		if [[ ! -f $root/.dep ]] && [[ ! -f $root/.root ]]; then
				echo "this"
			continue
		fi

		log $ARROW "Synchronizing link list for dependency $BOLD$dep$RESET...$RESET"
		invoke_link_sync 1
	done	
}

invoke_vdb () {	
	local root=$SANDBOX_ROOT/$sandbox
	local dep=$(return_dependency)

	if [[ -f $root/.dep ]]; then
		dep=$sandbox
	fi

	if [[ ! -d $root ]]; then
		log $BAR$RESET "Root for $BOLD$sandbox$RESET not found.$RESET\n Skipping update..."
		return 1
	fi

	local template=$SANDBOX_BASE/etc/pacman.d/tpl/pacman.$dep.conf 
	local pacmanconf=$SANDBOX_BASE/etc/pacman.d/pacman.$sandbox.conf
	local header="##\n## THIS pacman.conf WAS AUTOMATICALLY GENERATED on $(date "+%F %T"). \n## DO NOT EDIT\n##\n" 
	local basedep=$(return_base);
	local ignorepkg="IgnorePkg  ="
	local ignorelist="$(sbexecute $PARAMS$basedep pacman -Qq | sed -z -E "s,\n,\\\n|,g")"	
	
	if [[ ! -f $root/.root ]]; then	
		ignorepkg="$ignorepkg $(sbexecute $PARAMS$basedep pacman -Qq | sed -z "s/\n/ /g")"
		local dependency_chain=$(cat $SANDBOX_BASE/etc/deps/$sandbox 2>/dev/null)
		for depc in $dependency_chain; do
			if [[ $depc == $basedep ]]; then
				continue
			fi
			ignorepkg=$ignorepkg$(sbexecute $PARAMS$depc pacman -Qq | sed -z -E "s/$ignorelist//g" | sed -z "s/\n/ /g")
			ignorelist="$ignorelist$(sbexecute $PARAMS$depc pacman -Qq | sed -z -E "s,\n,\\\n|,g")"	
		done
	fi

	echo -e $header > $pacmanconf
	cat $template | sed -z "s/###IGNOREPKG###/$ignorepkg/g" >> $pacmanconf
	log "$BAR_GREEN Generated pacman.conf for $sandbox."
}

invoke_update() {
	local params=$PARAMS

	sbexecute $params$sandbox pacman -Sy
	local result=$(sbexecute pacman --color always $params$sandbox -Qu | grep -v "ignored")
	
	if [[ ! $result ]]; then
		log $BAR_GREEN "Packages are up-to-date for $sandbox sandbox!"
	 	return
	fi

	echo -e "$BAR Packages to be installed or upgraded: $RESET \n\n$result\n"
	[[ ! $(query_confirm "Confirm update and database synchronization on sandbox $sandbox") ]] && return
	SYNCREQ=1
	sbexecute pacman $params$sandbox -Su --noconfirm 2>/dev/null
	log $BAR "Synchronizing pacman database for foreign packages..."
	sbexecute pacman $params$sandbox -Su --dbonly --noconfirm --config=/tmp/pacman.conf 2>/dev/null
	log $BAR_GREEN "Synchronisation and upgrades are complete!"
}

update () {		
	for sandbox in "$@"; do			
		invoke_vdb
		[[ $? == 1 ]] && continue
		invoke_update
	done
}


return_base() {
	echo $(cat $SANDBOX_BASE/etc/deps/$sandbox 2>/dev/null | head -n 1)
}

return_dependency() {
	echo $(cat $SANDBOX_BASE/etc/deps/$sandbox 2>/dev/null | tail -n 1)
}

log () {
	echo -e "$@ $RESET"	
}

query_confirm () {
	if [[ $SWITCH == *n* ]]; then		
		echo 1	
		return
	fi
	read -rp "$BAR $@ [Y/n]$RESET " input
	if [[ "$input" != "Y" ]] && 
	   [[ "$input" != "y" ]] &&
           [[ "$input" != "" ]]; then
		return	
	fi
	echo 1
}

main $@
