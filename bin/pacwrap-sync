#!/bin/bash
#
#  PacWrap -- Chroot Synchronization Utility
# 
#  Copyright (C) 2023 Xavier R.M. 
#  sapphirus(at)azorium(dot)net
#
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, with only version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)
YELLOW=$(tput setaf 11)
RESET=$(tput sgr0)
BAR="$RED$BOLD::$RESET$BOLD"
BAR_GREEN="$GREEN$BOLD::$RESET$BOLD"
ARROW="$CYAN$BOLD->$RESET"
ARROW_GREEN="$GREEN$BOLD->$RESET"
ARROW_RED="$RED$BOLD->$RESET"

EXEC_NAME="pacwrap-sync"
EXEC_SCRIPT="pacwrap-exec --root --exec"

LINKFILES=("bin" "lib" "lib32" "share")

main () {
	parse_args $@

	if [[ $SWITCH == v ]]; then
		VER_DISPLAY=$EXEC_NAME pacwrap -v 
		exit	
	fi

	local roots=()
	local rootdeps=()
	local baserootdeps=()
	local syncroots=()

	init_vars

	if [[ $SWITCH == *g* ]]; then
		generate_pacman_conf ${ARGS[@]}
		return
	fi

	[[ $SWITCH == *yyyy* ]] && SYNCREQ=1

	if [[ $SWITCH == *u* ]] || ([[ $SWITCH == *y* ]] && [[ ! $SYNCREQ ]]); then
		log $BAR "Update container \n\n${baserootdeps[@]} ${rootdeps[@]} ${roots[@]}\n"
		
		[[ ! "$(query_confirm "Proceed with update?")" ]] && return	
		generate_pacman_conf ${baserootdeps[@]} ${rootdeps[@]}
		update ${baserootdeps[@]} ${rootdeps[@]}
	fi

	if [[ $SWITCH == *yyy* ]] || [[ $SYNCREQ == 1 ]]; then
		[[ $PACWRAP_CREATE ]] && syncroots=${roots[@]} 
		log $BAR_GREEN "Synchronizing container structures..."	
		generate_cache ${baserootdeps[@]}
		update_links ${rootdeps[@]} ${syncroots[@]} 
		cleanup_cache ${rootdeps[@]} ${baserootdeps[@]}
		[[ $SWITCH == *yyyy* ]] && return
	fi

	if [[ $SWITCH == *u* ]] || [[ $SWITCH == *y* ]]; then
		generate_pacman_conf ${roots[@]}
		update ${roots[@]}
		if [[ -f /usr/bin/paccache ]]; then
			paccache --cachedir $INSTANCE_CACHE_DIR -r -k 1 --min-mtime "14 days ago"
		fi
	fi
}

parse_args () {
	for var in "$@"; do
		case $var in 
			--generate-config|-g)
				SWITCH=g$SWITCH
				;;
			--update|-u)
				SWITCH=u$SWITCH
				;;
			--no-confirm|-n)
				SWITCH=n$SWITCH
				;;
			--sync|-y)
				SWITCH=y$SWITCH
				;;		
			-*)
				SWITCH=$(echo $var | cut -c 2-)
				;;
			*)
				ARGS+=("$var")
				;;
			esac
	done
}

init_vars() {
	INSTANCE_DATA_DIR="$HOME/.local/share/pacwrap"
	INSTANCE_CACHE_DIR="$HOME/.cache/pacwrap/pkg"
	INSTANCE_CONFIG_DIR="$HOME/.config/pacwrap"

	if [[ $PACWRAP_DEBUG ]]; then 
		INSTANCE_DATA_DIR="$PACWRAP_DEBUG"
		INSTANCE_CONFIG_DIR="$PACWRAP_DEBUG/cfg"	
	fi

	VERBOSE="/dev/null"
	[[ $SWITCH == *v* ]] && VERBOSE="/dev/stdout"

	LOG_FILE="$INSTANCE_DATA_DIR/pacwrap.log"
	OUTPUT_DEST=$LOG_FILE

	INSTANCE_ROOT=$INSTANCE_DATA_DIR/root
	INSTANCE_DB_ROOT=$INSTANCE_DATA_DIR/database
	INSTANCE_CONFIG_ROOT=$INSTANCE_CONFIG_DIR/root
	INSTANCE_PACMAN_SYNC=$INSTANCE_CONFIG_DIR/pacman/sync
	INSTANCE_PACMAN_SYNCDB=$INSTANCE_CONFIG_DIR/pacman/syncdb
	INSTANCE_PACMAN_TEMPLATE=$INSTANCE_CONFIG_DIR/pacman/template

	if [[ ! -d $INSTANCE_ROOT ]]; then
		echo $BOLD$RED"error:$RESET Sandbox root is either missing or an environmental variable is misconfigured.$RESET" 
		exit
	fi	

	local rootlist=$(ls -U -1F $INSTANCE_ROOT | grep -i "/" | tr -d "/")
	for sandbox in $rootlist; do
		local type=$(return_type)
		case $type in
			BASE)
				baserootdeps+=("$sandbox")
			;;
			DEP)
				rootdeps+=("$sandbox")
			;;
			*)
				roots+=("$sandbox")
			;;
		esac
	done
	syncroots=${roots[@]}

	if [[ ${ARGS[@]} ]]; then 
		roots=()
		for sandbox in $ARGS; do
			check_root "container" 
			[[ $? == 1 ]] && continue
			roots+=("$sandbox")
		done

	fi
}

invoke_link_deletion() {
	local pwd=$PWD
	local file_old=$link/$item.old.zst
	local file_new=$link/$item.zst
	local working_dir=$root/usr

	([[ ! -f $file_new ]] || [[ ! -f $file_old ]] || [[ ! -d $working_dir ]]) && return

	cd $working_dir
	diff --unchanged-group-format= --new-line-format='%L' \
		-biw <(echo "$(zstd -fd < $file_new)") <(echo "$(zstd -fd < $file_old)") | xargs rm -rf 2>>$OUTPUT_DEST 1>>$OUTPUT_DEST
	cd $pwd
}

invoke_update_link() {
	local sandbox=$1

	if [[ ${synced[$sandbox]} ]]; then
		return
	fi
	if [[ $(return_type) == "BASE" ]]; then
		return
	fi

	local linkfiles=${LINKFILES[@]}
	local dep=$(return_dependency)
	
	if [[ $SWITCH != *f* ]]; then
		for item in ${linkfiles[@]}; do
			local root=$INSTANCE_ROOT/$sandbox
			local link=$INSTANCE_DB_ROOT/$dep
			invoke_link_deletion
		#	log_to_file "Deleted stray files from $dep/$item in $sandbox."
		done
	fi

	for item in ${linkfiles[@]}; do
		local root=$INSTANCE_ROOT/$sandbox
		local source=$INSTANCE_ROOT/$dep		
		local src=$source/usr/$item 
		local dest=$root/usr/	

		([[ ! -d $src ]] || [[ ! -d $dest ]]) && continue

		cp -flR $src $dest 2>>$OUTPUT_DEST 1>>$OUTPUT_DEST
		log_to_file "Linked $sandbox/$item against $dep/$item."
	done

	if [[ $(return_type) == "DEP" ]]; then
		invoke_generate_cache
	fi
	synced[$sandbox]=1
}

update_links() {
	declare -A synced
	local amt=${#@}
	local amt_done=0

	init_progress
	set_progress_label " Linking structures"

	for sandbox in "$@"; do				
		((amt_done++))
		progress_bar	
		check_root "link synchronization"
		[[ $? == 1 ]] && continue		
		for dep in $(return_dependencies); do
			check_root "link synchronization"
			[[ $? == 1 ]] && continue	
			invoke_update_link $dep
		done
		invoke_update_link $sandbox
	done; echo
}

cleanup_cache() {
	for sandbox in "$@"; do				
		check_root "cache file operation"
		[[ $? == 1 ]] && continue
	
		local linkfiles=${LINKFILES[@]}
	
		for item in ${linkfiles[@]}; do
			[[ -f $INSTANCE_DB_ROOT/$sandbox/$item.old.zst ]] && 
				rm $INSTANCE_DB_ROOT/$sandbox/$item.old.zst 2>>$OUTPUT_DEST 1>>$OUTPUT_DEST
		done
	done
}

invoke_generate_cache() {
	local dep=$sandbox
	local linkfiles=${LINKFILES[@]}
	
	for item in ${linkfiles[@]}; do
		local root=$INSTANCE_ROOT/$sandbox
		local link=$INSTANCE_DB_ROOT/$sandbox
		local rdir=$root/usr/
		local tdir=$root/usr/$item		

		if ([[ ! -d $root ]] || [[ ! -d $tdir ]]); then
			log $ARROW_RED$RESET "Root or link target for $BOLD$sandbox$RESET not found..."		
			log_to_file "Root or link target for $sandbox not found during synchronization operation."
			return
		fi

		[[ -f $link/$item.zst ]] && mv $link/$item.zst $link/$item.old.zst 2>>$OUTPUT_DEST 1>>$OUTPUT_DEST
		find $tdir -type f,d,l | sed -z "s,$rdir,,g" | zstd -fq -o $link/$item.zst
	done
	log_to_file "Generated link cache for $sandbox!"	
}

generate_cache() {
	for sandbox in "$@"; do				
		check_root "cache"
		[[ $? == 1 ]] && continue

		invoke_generate_cache
	done
}

check_root() {
	if [[ ! -d $INSTANCE_ROOT/$sandbox ]]; then
		log $ARROW_RED$RESET "Root for $BOLD$sandbox$RESET not found.$RESET\n Skipping $@..."
		return 1
	fi
}

invoke_vdb () {	
	local root=$INSTANCE_ROOT/$sandbox
	local dep=

	if [[ $(return_type) != "ROOT" ]]; then
		dep=$sandbox
	else
		dep=$(return_dependency)
	fi

	declare -A skip
	local template="cat $INSTANCE_PACMAN_TEMPLATE/pacman.$dep.conf"

	local pacmanconf=$INSTANCE_PACMAN_SYNC/pacman.$sandbox.conf
	local ignorepkg="## Start of automated configuration ##\n"
	
	if [[ $(return_type) != "BASE" ]]; then		
		for depc in $(return_dependencies); do
			local skiplist=
			local pkgs=$($EXEC_SCRIPT $depc pacman -Qq)
			for pkg in $pkgs; do
			 	[[ ${skip[$pkg]} ]] && continue
				ignorepkg+="IgnorePkg  = $pkg\n"
			done			
			skiplist=$pkgs$skiplist

			for pkg in $skiplist; do
				skip[$pkg]=1
			done
		done
	else 
		ignorepkg+="IgnorePkg  = pacman-mirrorlist\n"
	fi

	ignorepkg+="## End of automated configuration ##"
	
	local header="##\n## THIS pacman.conf WAS AUTOMATICALLY GENERATED on $(date "+%F %T"). \n## DO NOT EDIT\n##\n" 

	echo -e $header > $pacmanconf
	$template | sed -z "s/###IGNOREPKG###/$ignorepkg/g" >> $pacmanconf
	log_to_file "Generated $pacmanconf."
	invoke_vdb_update
}

invoke_vdb_update() {
	local pacmanconf=$INSTANCE_PACMAN_SYNCDB/pacman.$sandbox.conf
	local local_pkgs=$($EXEC_SCRIPT $sandbox pacman -Qq)
	local ignorepkg="## Start of automated configuration ##\n"
	
	if [[ $(return_type) != "BASE" ]]; then	
		for pkg in $local_pkgs; do
			[[ ${skip[$pkg]} ]] && continue
			ignorepkg+="IgnorePkg  = $pkg\n"
		done
	fi
	
	ignorepkg+="## End of automated configuration ##"
	echo -e $header > $pacmanconf
	$template | sed -z "s/###IGNOREPKG###/$ignorepkg/g" >> $pacmanconf
	log_to_file "Generated $pacmanconf."
}


invoke_update() {
	log_to_file "Checking $sandbox container for updates..."
	log $BAR_GREEN "Checking $sandbox for updates..."

	local type=$(return_type);
	local syncdb=$(return_pacman_syncdb)

	if [[ $SWITCH == *y* ]] && ([[ $type == "BASE" ]] || [[ $type == "DEP" ]]); then
		([[ ! $PMSYNCED ]] || ([[ $syncdb ]] && [[ $syncdb == 1 ]])) &&
			$EXEC_SCRIPT $sandbox pacman --logfile /tmp/pacman.log -Sy
		PMSYNCED=1
	fi

	local result=$($EXEC_SCRIPT $sandbox pacman --color always -Qu | grep -v "ignored")

	if ([[ $SWITCH == *yy* ]] || ([[ $result ]] && [[ $SWITCH == *u* ]])) && [[ $(return_type) != "BASE" ]]; then
		log $ARROW "Synchronizing database against foreign packages..."
		$EXEC_SCRIPT $sandbox pacman -Su --logfile /tmp/pacman.log --dbonly --noconfirm --config=/tmp/pacman.conf 2>/dev/null 1>$VERBOSE
		log " Database synchronization complete!"
	fi

	if [[ ! $result ]]; then
		log "$ARROW Container $BOLD$sandbox$RESET is up to date!"
		log_to_file "Database up-to-date for $sandbox."
		return
	fi

	echo -e "$BAR Package changes: $RESET \n\n$result\n"
	[[ $SWITCH != *u* ]] && return
	[[ ! $(query_confirm "Proceed with installation on $sandbox") ]] && return
	log_to_file "Updating $sandbox container.."

	SYNCREQ=1
	$EXEC_SCRIPT $sandbox pacman -Su --logfile /tmp/pacman.log --noconfirm 2>/dev/null
	log $ARROW_GREEN "Upgrade complete!"
}

update () {		
	for sandbox in "$@"; do	
		check_root "update"
		[[ $? == 1 ]] && continue	
		invoke_update
	done
}

print_progress_bar() {	
    printf "$PROGRESS_LABEL" 
    printf "%-*s" $(($2+1)) '[' | tr ' ' '#'
    printf "%*s% 3d%%\r"  $(($1-$2))  "]" "$3"
}


init_progress() {
	TTY_SIZE=($(stty size))
	PROGRESS_LENGTH=$((${TTY_SIZE[1]}/2))
}	


set_progress_label() {
	PROGRESS_LABEL="$1"
	local label_length=${#PROGRESS_LABEL}
	local padding_length=$(($PROGRESS_LENGTH-$label_length-8))
	for ((i=0; i<=padding_length; i+=1)); do
		PROGRESS_LABEL+=" "
	done
}

progress_bar() {
	local bar_percent=$(($((PROGRESS_LENGTH*2))*$amt_done/$amt % 2 + $PROGRESS_LENGTH*$amt_done/$amt))
	local percent=$((200*$amt_done/$amt % 2 + 100*$amt_done/$amt))

	print_progress_bar $((PROGRESS_LENGTH+1)) $bar_percent $percent
}

generate_pacman_conf () {
	log $BAR_GREEN "Generating pacman configuration..."
	init_progress
	set_progress_label " pacman.conf"
	local amt=${#@}
	local amt_done=0

	for sandbox in "$@"; do	
		((amt_done++))
		progress_bar
		check_root "pacman.conf generation"
		[[ $? == 1 ]] && continue	
		invoke_vdb
	done; echo
}

return_pacman_syncdb() {
	source $INSTANCE_CONFIG_ROOT/$sandbox
	echo $SYNC_PACMANDB
}

return_type() {
	source $INSTANCE_CONFIG_ROOT/$sandbox
	echo $TYPE
}

return_dependencies() {
	source $INSTANCE_CONFIG_ROOT/$sandbox
	echo ${DEPS[@]}
}

return_base() {
	source $INSTANCE_CONFIG_ROOT/$sandbox
	echo ${DEPS[0]}
}

return_dependency() {
	source $INSTANCE_CONFIG_ROOT/$sandbox
	echo ${DEPS[$((${#DEPS[@]} - 1))]}
}

log () {
	echo -e "$@ $RESET"
}

log_to_file() {
	echo -e "[$(date '+%FT%H:%M:%S%z')] [$EXEC_NAME] $@" >>$LOG_FILE 
}


query_confirm () {
	if [[ $SWITCH == *n* ]]; then		
		echo 1	
		return
	fi
	read -rp "$BAR $@ [Y/n]$RESET " input
	if [[ "$input" != "Y" ]] && 
	   [[ "$input" != "y" ]] &&
           [[ "$input" != "" ]]; then
		return	
	fi
	echo 1
}

main $@
