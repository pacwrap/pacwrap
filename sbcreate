#!/bin/bash
#
# BSD-3-Clause
#
# Sandbox Creation Utility Script (SBCreate) Copyright 2023 Xavier (sapphirus@azorium.net)
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#  this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice, 
#  this list of conditions and the following disclaimer in the documentation 
#  and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its contributors 
#  may be used to endorse or promote products derived from this software without 
#  specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (
# INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

MACHINE_ID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
	
main () {	

	parse_args "$@"

	if [[ ! $SANDBOX ]]; then
		echo "Sandbox not specified."
		exit 1;
	fi

	init_vars

	if [[ -d $INSTANCE_ROOT ]] || [[ -d $INSTANCE_HOME ]]; then 
		echo "Root or home directory for $SANDBOX exists. Aborting." 
		exit 1
	fi

	if [[ ! -d $BASE_ROOT ]] && [[ ! $DEPEND ]]; then
		echo "Directory not found for $DEPEND root dependency."
		exit 1
	fi

	echo "Pre-initialising structures.."
	
	init_struct

	if [[ ! -d $INSTANCE_ROOT ]] || [[ ! -d $INSTANCE_HOME ]]; then 
		echo "Directory creation failed." 
		exit 1
	fi

	echo "Initialising chroot.."

	init_chroot

	if [[ ! $ISROOTDEP ]]; then
		sbupdate -sb $SBUPDATE_SANDBOX
	fi

	echo "Cleaning up.."

	cleanup

	echo "Finalising chroot.."

	finalise

	echo "Process complete! Use sbexecute to configure $SANDBOX."
}

parse_args () {
	ArGS=()
	for var in "$@"; do
		case $var in 
			--dep=*)
				DEPEND=$(echo $var | cut -c 7-)
				;;	
			--is-dep)
				SWITCH=d$SWITCH
				;;
			--is-root)
				SWITCH=r$SWITCH
				;;
			-*)
				SWITCH=$(echo $var | cut -c 2-)
				;;
			*)
				SANDBOX=$var
				;;
			esac
	done
}

init_vars () {
	PACMAN_CONFIG=pacman.install.conf	
	PARAMS="--sandbox=$SANDBOX --root --exec"	
	INSTANCE_ROOT=$SANDBOX_BASE/fs/root/$SANDBOX
	INSTANCE_HOME=$SANDBOX_BASE/fs/home/$SANDBOX
	INSTANCE_DEP_LIST=$SANDBOX_BASE/etc/deps/$SANDBOX
	SBUPDATE_SANDBOX=$SANDBOX

	if [[ $SWITCH == *d* ]]; then
		SBUPDATE_SANDBOX=
		ISDEP=1
	fi
	if [[ $SWITCH == *r* ]]; then
		ISROOTDEP=1
		PACMAN_CONFIG=pacman.conf
	fi

	BASE_ROOT=$SANDBOX_BASE/fs/root/$DEPEND
	if [[ ! $DEPEND ]] && [[ ! $ISROOTDEP ]]; then
		echo "Root dependency not specified."
		exit 1
	fi	
}


init_struct () {
	mkdir -p $INSTANCE_ROOT $INSTANCE_HOME \
		$INSTANCE_ROOT/etc \
		$INSTANCE_ROOT/var/lib/pacman \
		$INSTANCE_ROOT/etc/pacman.d/

	cp $SANDBOX_BASE/etc/pacman.conf $INSTANCE_ROOT/etc/pacman.conf
	cp $SANDBOX_BASE/etc/pacman.conf $SANDBOX_BASE/etc/pacman.d/pacman.$SANDBOX.conf
	cp $SANDBOX_BASE/etc/pacman.install.conf $INSTANCE_ROOT/etc/pacman.install.conf

	cp /etc/pacman.d/mirrorlist $INSTANCE_ROOT/etc/pacman.d/mirrorlist
	echo "en_CA.UTF-8 UTF-8" > $INSTANCE_ROOT/etc/locale.gen
	echo "LANG=en_CA.UTF-8" > $INSTANCE_ROOT/etc/locale.conf
	echo "user:x:1000:1000::/home/user:/bin/bash" >> $INSTANCE_ROOT/etc/passwd
	echo "$MACHINE_ID" > $INSTANCE_ROOT/etc/machine-id
	echo 'PS1="'$SANDBOX'> "' > $INSTANCE_HOME/.bashrc

	if [[ ! $ISROOTDEP ]]; then
		if [[ -f $SANDBOX_BASE/etc/deps/$DEPEND ]]; then
			echo "$(cat $SANDBOX_BASE/etc/deps/$DEPEND 2>/dev/null)" > $INSTANCE_DEP_LIST
			echo "$DEPEND" >> $INSTANCE_DEP_LIST
		else
			echo "$DEPEND" > $INSTANCE_DEP_LIST
		fi


	fi

	if [[ $ISROOTDEP ]]; then
		touch $INSTANCE_ROOT/.root		
	fi
		
	if [[ $ISDEP ]]; then
		cp $SANDBOX_BASE/etc/pacman.tpl.conf $SANDBOX_BASE/etc/pacman.d/tpl/pacman.$SANDBOX.conf
		mkdir -p $SANDBOX_BASE/etc/db/$SANDBOX
		touch $INSTANCE_ROOT/.dep
	fi
	
}

init_chroot () {	
	fakechroot fakeroot pacman -Syu \
   	--root $INSTANCE_ROOT \
    	--dbpath $INSTANCE_ROOT/var/lib/pacman \
    	--config $INSTANCE_ROOT/etc/$PACMAN_CONFIG \
	--cache /var/lib/cache/pacman/pkg \
    	base lib32-glibc --noconfirm 2>/dev/null
}

finalise () {
	sbexecute $PARAMS pacman-key --init
	sbexecute $PARAMS pacman-key --populate
	sbexecute $PARAMS locale-gen
	sbexecute $PARAMS update-ca-trust
	if [[ ! $ISROOTDEP ]]; then
		if [[ $DEPEND ]]; then		
			local deps=$DEPEND" "$(cat $SANDBOX_BASE/etc/deps/$DEPEND 2>/dev/null)
			if [[ ! -f $SANDBOX_BASE/etc/deps/$DEPEND ]]; then
				deps="$DEPEND"
			fi
			for dep in $deps; do		
				sbexecute $PARAMS pacman -Su --dbonly --noconfirm $(sbexecute --sandbox=$dep --root --exec pacman -Qqe) 2>/dev/null	
			done
		fi
		sbupdate -n $SBUPDATE_SANDBOX
	fi	
}

cleanup () {
	rm -v -r \
	$INSTANCE_ROOT/boot \
	$INSTANCE_ROOT/mnt \
	$INSTANCE_ROOT/root \
	$INSTANCE_ROOT/srv \
	$INSTANCE_ROOT/sys \
	$INSTANCE_ROOT/opt \
	$INSTANCE_ROOT/run \
	$INSTANCE_ROOT/dev \
	$INSTANCE_ROOT/etc/pacman.install.conf
}

main $@
